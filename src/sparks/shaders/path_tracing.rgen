#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) readonly buffer light_source_array {
  int light_sources[];
  // format 
  // [0] number of light source objs
  // [1] number of light source faces
  // [2k] obj index of light sources (k>=1)
  // [2k+1] number of faces in the obj
};
layout(binding = 10) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}


HitRecord hit_record, hit_record0;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);

  float rr_prob = 0.85;

  int bounces = 0;

  while (1>0) {

    TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }

    Material material = materials[hit_record.hit_entity_id];

    if (material.material_type != MATERIAL_TYPE_SPECULAR && material.material_type != MATERIAL_TYPE_TRANSMISSIVE) {
    // sampling the light
      int ls_cnt = int(light_sources[0]);
      int face_cnt;
      int obj,face;
      Vertex node1, node2, node3;
      vec3 pt;
      vec3 fraction;
      if (ls_cnt != 0){
        obj = int(fract(RandomFloat()) * ls_cnt)+1;
        face_cnt = int(fract(RandomFloat()) * light_sources[2*obj+1]);
        obj = light_sources[2*obj];

        face = int(fract(RandomFloat()) * face_cnt);

        ObjectInfo light_obj_info = object_infos[obj];


        node1 = GetVertex(light_obj_info.vertex_offset + indices[light_obj_info.index_offset + face * 3 + 0]);
        node2 = GetVertex(light_obj_info.vertex_offset + indices[light_obj_info.index_offset + face * 3 + 1]);
        node3 = GetVertex(light_obj_info.vertex_offset + indices[light_obj_info.index_offset + face * 3 + 2]);
        do {
        fraction.x = fract(RandomFloat());
        fraction.y = fract(RandomFloat());
        fraction.z = fract(RandomFloat());
        } while (fraction.x + fraction.y + fraction.z == 0);

        fraction /= (fraction.x + fraction.y + fraction.z);
        
        // randomly sampled point on the face
        pt = fraction.x * node1.position + fraction.y * node2.position + fraction.z * node3.position;
        vec3 normal0 = cross(node2.position-node1.position, node3.position-node1.position);
        float area = length(normal0);
        normal0 = normalize(normal0);

        // TraceRay(hit_record.position, normalize(pt-hit_record.position));

        vec3 origin0 = hit_record.position;
        vec3 direction0 = normalize(pt - hit_record.position);
        if (dot(direction0, normal0) >0)
          normal0 = -normal0;
        float tmin = 1e-3;
        float tmax = 1e4;

        ray_payload.t = -1.0;
        ray_payload.barycentric = vec3(0.0);
        ray_payload.object_id = 0;
        ray_payload.primitive_id = 0;
        ray_payload.object_to_world = mat4x3(1.0);

        traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin0, tmin,
                    direction0, tmax, 0);
        hit_record0 = GetHitRecord(ray_payload, origin, direction);
        Material material0 = materials[hit_record0.hit_entity_id];
        if (length(hit_record0.position - pt) < 1e-3 && material0.material_type == MATERIAL_TYPE_EMISSION) { 
          // no obstacle
          vec3 radiance_dir = material0.emission * material0.emission_strength * INV_PI / 2
                          * bsdf(material, direction0, direction, hit_record.normal) 
                          * dot(normalize(hit_record.normal), direction0)
                          * dot(normal0, -direction0)
                          / pow(length(hit_record0.position-hit_record.position),2)
                          * ls_cnt * area * light_sources[1];
          radiance += throughput * radiance_dir;
        }
      }
    }

    if (fract(RandomFloat()) > rr_prob) {
      break;
    }

    throughput /= rr_prob;

    // sampling the env
    if (material.material_type == MATERIAL_TYPE_EMISSION) {
      if (bounces == 0)
        radiance += throughput * material.emission * material.emission_strength;
      break;
    } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
      origin = hit_record.position;

      vec3 median = -dot(direction, hit_record.normal) * hit_record.normal;
      vec3 out_direction = 2*median + direction;
      direction = out_direction;
    } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {      
      // Lambertian
      if (dot(direction, hit_record.normal) > 0)
        hit_record.normal = -hit_record.normal;

      // cosine importance sampling
      float theta, phi, rand1, rand2;
      rand1 = fract(RandomFloat());
      rand2 = fract(RandomFloat());

      theta = acos(sqrt(1-rand1));
      phi = 2*PI*rand2;

      vec3 out_direction;

      vec3 local_z = normalize(hit_record.normal);
      vec3 local_x = normalize(direction - dot(direction, local_z) * local_z);
      vec3 local_y = cross(local_z,local_x);

      out_direction = normalize(sin(theta)*cos(phi)*local_x + sin(theta)*sin(phi)*local_y + cos(theta)*local_z);

      // vec3 brdf = material.BRDF(hit_record, direction, out_direction);
      vec3 brdf = bsdf(material, direction, out_direction, hit_record.normal);

      // float cosine = dot(out_direction, normalize(hit_record.normal));

      throughput *= (brdf * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * PI);

      origin = hit_record.position;
      direction = out_direction;
    } else if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
      // Transmissive
      origin = hit_record.position;

      vec3 median = -dot(direction, hit_record.normal) * hit_record.normal;
      vec3 proj_x = normalize(direction + median);
      vec3 proj_y = hit_record.normal; 

      float cos_theta = dot(hit_record.normal, direction);
      float sin_theta = sqrt(1-cos_theta*cos_theta);
      float sin_phi, cos_phi;
      float eta = transmissive_ratio;
      float fresnel;

      if (cos_theta < 0) {
        // from air into material
        eta = 1 / transmissive_ratio;
        proj_y = -proj_y;
        cos_theta = -cos_theta;
      }
      sin_phi = sin_theta * eta;
      if (sin_phi > 1) {
        fresnel = 1;
      } else {
        cos_phi = sqrt(1-sin_phi*sin_phi);
        float Rs = pow(((cos_theta - eta * cos_phi) / (cos_theta + eta * cos_phi)), 2);
        float Rp = pow(((cos_phi - eta * cos_theta) / (cos_phi + eta * cos_theta)), 2);
        fresnel = (Rs + Rp) / 2;
      }



      if (fract(RandomFloat()) > fresnel) {
        direction = cos_phi * proj_y + sin_phi * proj_x;
      } else {
        direction = 2*median + direction; 
      }

    } else {
      // PRINCIPLED or other self-defined brdf
      if (dot(direction, hit_record.normal) > 0)
        hit_record.normal = -hit_record.normal;

      // cosine importance sampling
      float theta, phi, rand1, rand2;
      rand1 = fract(RandomFloat());
      rand2 = fract(RandomFloat());

      theta = acos(sqrt(1-rand1));
      phi = 2*PI*rand2;

      vec3 out_direction;

      vec3 local_z = normalize(hit_record.normal);
      vec3 local_x = normalize(direction - dot(direction, local_z) * local_z);
      vec3 local_y = cross(local_z,local_x);

      out_direction = normalize(sin(theta)*cos(phi)*local_x + sin(theta)*sin(phi)*local_y + cos(theta)*local_z);

      // vec3 brdf = material.BRDF(hit_record, direction, out_direction);
      vec3 brdf = bsdf(material, direction, out_direction, hit_record.normal);

      // float cosine = dot(out_direction, normalize(hit_record.normal));

      throughput *= (brdf * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * PI);

      origin = hit_record.position;
      direction = out_direction;
    }

    bounces++;
  }


  // for (int b = 0; b < guo.num_bounces; b++) {
  //   TraceRay(origin, direction);

  //   if (ray_payload.t == -1.0) {
  //     radiance += throughput * SampleEnvmap(direction);
  //     break;
  //   } else {
  //     Material material = materials[hit_record.hit_entity_id];
  //     if (material.material_type == MATERIAL_TYPE_EMISSION) {
  //       radiance += throughput * material.emission * material.emission_strength;
  //       break;
  //     } else {
  //       throughput *= material.albedo_color *
  //                     vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord));
  //       origin = hit_record.position;
  //       direction = guo.envmap_light_direction;
  //       radiance += throughput * guo.envmap_minor_color;
  //       throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
  //       TraceRay(origin, direction);
  //       if (ray_payload.t < 0.0f) {
  //         radiance += throughput * guo.envmap_major_color;
  //       }
  //       break;
  //     }
  //   }
  // }
  return max(vec3(-10.0),min(vec3(10.0), radiance));
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
