#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);

  float rr_prob = 0.85;

  int bounces = 0;

  while (fract(RandomFloat()) <= rr_prob) {
    throughput /= rr_prob;

    TraceRay(origin, direction);

    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    }

    Material material = materials[hit_record.hit_entity_id];

    if (material.material_type == MATERIAL_TYPE_EMISSION) {
      radiance += throughput * material.emission * material.emission_strength;
      break;
    } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
      origin = hit_record.position;

      vec3 median = -dot(direction, hit_record.normal) * hit_record.normal;
      vec3 out_direction = 2*median + direction;
      direction = out_direction;
    } else {
      // Lambertian


      if (dot(direction, hit_record.normal) > 0)
        hit_record.normal = -hit_record.normal;

      // box-muller
      float rand1, rand2, rand3, rand4;

      do {
        rand1 = fract(RandomFloat());
        rand2 = fract(RandomFloat());
        rand3 = fract(RandomFloat());
        rand4 = fract(RandomFloat());
      } while (rand1 == 0 || rand2 == 0 || rand3 == 0 || rand4 == 0);

      float r1 = sqrt(-2 * log(rand1)); 
      float r2 = sqrt(-2 * log(rand3)); 
      float theta1 = 2*PI*rand2;
      float theta2 = 2*PI*rand4;

      vec3 out_direction;
      do {
        out_direction.x = r1 * cos(theta1);
        out_direction.y = r1 * sin(theta1);
        out_direction.z = r2 * cos(theta2);
      } while (length(out_direction) == 0);      
      out_direction = normalize(out_direction);
      if (dot(out_direction, hit_record.normal) < 0) 
        out_direction = -out_direction;

      // vec3 brdf = material.BRDF(hit_record, direction, out_direction);
      vec3 brdf = bsdf(material, direction, out_direction, hit_record.normal);

      float cosine = dot(out_direction, normalize(hit_record.normal));

      throughput *= (brdf * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * cosine * (2*PI)  /*pdf(out_direction)*/  );

      origin = hit_record.position;
      direction = out_direction;
    }

    
  }


  // for (int b = 0; b < guo.num_bounces; b++) {
  //   TraceRay(origin, direction);

  //   if (ray_payload.t == -1.0) {
  //     radiance += throughput * SampleEnvmap(direction);
  //     break;
  //   } else {
  //     Material material = materials[hit_record.hit_entity_id];
  //     if (material.material_type == MATERIAL_TYPE_EMISSION) {
  //       radiance += throughput * material.emission * material.emission_strength;
  //       break;
  //     } else {
  //       throughput *= material.albedo_color *
  //                     vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord));
  //       origin = hit_record.position;
  //       direction = guo.envmap_light_direction;
  //       radiance += throughput * guo.envmap_minor_color;
  //       throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
  //       TraceRay(origin, direction);
  //       if (ray_payload.t < 0.0f) {
  //         radiance += throughput * guo.envmap_major_color;
  //       }
  //       break;
  //     }
  //   }
  // }
  return radiance;
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
